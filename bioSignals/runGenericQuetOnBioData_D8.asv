close all;
clear all;
clc;
dbstop if error;
addpath(genpath('../../3D_Questionnaire/Questionnaire'));
addpath(genpath('../../3D_Questionnaire/utils'));
addpath(genpath('../../PCAclustering'));
addpath(genpath('../gen_utils'));
addpath(genpath('../tiling'));

files = {'8_6_14_1-20_control' '8_6_14_21-60_cno'};% '8_6_14_21-60_cno' };% '8_15_13_1-35' '8_12_14_1-40' '8_17_14_1-45'  '8_17_14_46-80'  '8_15_13_1-35' '8_12_14_1-40'

rng(73631);
%% Init params
dorandperm_col = false;
dorandperm_row = false;
dorandperm_trials = false;
eigsnum_col = 12;eigsnum_row = 12;eigsnum_trial= 12;
row_alpha = .2;row_beta = 0;col_alpha = .2;col_beta = 0;trial_alpha = .2;trial_beta = 0;
%% Load Data

datapth = '..\..\..\datasets\biomed\D8';

nt = 120;
[X, expLabel, NeuronsLabels] = loadNeuronsData(datapth, files, nt);


[nr, nt, nT] = size(X);
data = X;

%% Run Qu. 3D
params  = SetGenericQuestParamsD8;
params.col_tree.CalcAffFun = @CalcEmdAff3D_mahal;
params.row_tree.CalcAffFun = @CalcEmdAff3D_mahal;
params.trial_tree.CalcAffFun = @CalcEmdAff3D_mahal;
params.col_tree.treeDepth = 7;
params.row_tree.treeDepth = 7;
params.trial_tree.treeDepth = 7;
params.row_emd.beta=0.2;
params.col_emd.beta=0.2;

params.n_iters=1;
[ row_tree, trial_tree, col_tree,  row_dual_aff, trial_dual_aff, col_dual_aff] = RunGenericQuestionnaire3D( params, permute(data, [2 1 3]) );

% [ col_tree, trial_tree, row_tree,  col_dual_aff, trial_dual_aff, row_dual_aff] = RunGenericQuestionnaire3D( params, permute(data, [2 3 1]) );
figure;
subplot(3,2,1);
[vecs, vals] = CalcEigs(threshold(row_dual_aff, 0.0), 4);
plotEmbeddingWithColors(vecs * vals, 1:size(data, 2), 'Time Embedding');
subplot(3,2,2);
plotEmbeddingWithColors(vecs * vals, [ones(1, 40) 100*ones(1, 80)], 'Time Colored by Tone');

subplot(3,1,2);
[vecs, vals] = CalcEigs(threshold(trial_dual_aff, 0.0), 4);
plotEmbeddingWithColors(vecs * vals, 1:size(data, 1), 'Nuerons Embedding');
subplot(3,2,5);
[vecs, vals] = CalcEigs(threshold(col_dual_aff, 0.0), 2);
plotEmbeddingWithColors(vecs * vals, 1:size(data, 3), 'Trials Embedding');
subplot(3,2,6);
[vecs, vals] = CalcEigs(threshold(col_dual_aff, 0.0), 3);
plotEmbeddingWithColors(vecs * vals, 1:size(data, 3), 'Trials Embedding');
figure;    subplot(3,1,1);
plotTreeWithColors(col_tree, 1:length(col_dual_aff));    title('Trials Tree');
subplot(3,1,2);    plotTreeWithColors(row_tree, 1:length(row_dual_aff));    title('Time Tree')
subplot(3,1,3);    plotTreeWithColors(trial_tree, 1:length(trial_dual_aff));    title('Nuerons Tree');

tree_level=2;
[vecs, vals] = CalcEigs(threshold(row_dual_aff, 0.0), 2);

% [~,toneIndic] = min(diff(vecs(2:end)));
toneIndic=41;
[vecs, vals] = CalcEigs(threshold(col_dual_aff, 0.0), 2);
CNO_th = min(vecs(1:20));
inds2CNO = find((vecs )<= CNO_th);
inds2CONTROL = find(vecs > CNO_th);
inds2CONTROL_part1 = inds2CONTROL(inds2CONTROL<=30);
inds2CONTROL_part2 = inds2CONTROL(inds2CONTROL>30);
[meanMat_beforeCNO_beforeTone, allMat_beforeCNO_beforeTone] = getCentroidsByTree(trial_tree{tree_level}, X(:,1:toneIndic,inds2CONTROL_part1), NeuronsLabels, NeuronsLabels);
[meanMat_afterCNO_beforeTone, allMat_afterCNO_beforeTone] = getCentroidsByTree(trial_tree{tree_level}, X(:,1:toneIndic,inds2CONTROL_part2), NeuronsLabels, NeuronsLabels);
[meanMat_CNO_beforeTone, allMat_CNO_beforeTone] = getCentroidsByTree(trial_tree{tree_level}, X(:,1:toneIndic,inds2CNO), NeuronsLabels, NeuronsLabels);

params.init_aff_mean_mat = params.init_aff_row;
params.init_aff_mean_mat.metric = 'euc';
[ aff_mat1,  ] = CalcInitAff( meanMat_beforeCNO_beforeTone.', params.init_aff_row );
[vecs, vals] = CalcEigs(threshold(aff_mat1, 0.0), 2);% 
[ row_order1 ] = OrganizeDiffusion3DbyOneDim( meanMat_beforeCNO_beforeTone, vecs*vals );


% figure;plotEmbeddingWithColors(vecs(row_order,:) * vals, 1:11, 'Nuerons Embedding');
% plotByClustering(meanMat_beforeCNO_beforeTone(row_order1, :), allMat_beforeCNO_beforeTone(row_order1), ['Before Tone Before CNO Tree Level ' num2str(tree_level)]);
% plotByClustering(meanMat_afterCNO_beforeTone(row_order1, :), allMat_afterCNO_beforeTone(row_order1), ['Before Tone After CNO Organized By Tree Of Before CNO Tree Level ' num2str(tree_level)]);
% plotByClustering(meanMat_CNO_beforeTone(row_order1, :), allMat_CNO_beforeTone(row_order1), ['Before Tone During CNO Organized By Tree Of Before CNO Tree Level ' num2str(tree_level)]);




[meanMat_beforeCNO_afterTone, allMat_beforeCNO_afterTone] = getCentroidsByTree(trial_tree{tree_level}, X(:,toneIndic+1:end,inds2CONTROL_part1), NeuronsLabels, NeuronsLabels);
[meanMat_afterCNO_afterTone, allMat_afterCNO_afterTone] = getCentroidsByTree(trial_tree{tree_level}, X(:,toneIndic+1:end,inds2CONTROL_part2), NeuronsLabels, NeuronsLabels);
[meanMat_CNO_afterTone, allMat_CNO_afterTone] = getCentroidsByTree(trial_tree{tree_level}, X(:,toneIndic+1:end,inds2CNO), NeuronsLabels, NeuronsLabels);

% [ aff_mat1,  ] = CalcInitAff( meanMat_beforeCNO_afterTone.', params.init_aff_row );
% [vecs, vals] = CalcEigs(threshold(aff_mat1, 0.0), 2);% 
% [ row_order1 ] = OrganizeDiffusion3DbyOneDim( meanMat_before, vecs*vals );
% % figure;plotEmbeddingWithColors(vecs(row_order,:) * vals, 1:11, 'Nuerons Embedding');
% plotByClustering(meanMat_beforeCNO_afterTone(row_order1, :), allMat_beforeCNO_afterTone(row_order1), ['After Tone Before CNO Tree Level ' num2str(tree_level)]);
% plotByClustering(meanMat_afterCNO_afterTone(row_order1, :), allMat_afterCNO_afterTone(row_order1), ['After Tone After CNO Organized By Tree Of Before CNO Tree Level ' num2str(tree_level)]);
% plotByClustering(meanMat_CNO_afterTone(row_order1, :), allMat_CNO_afterTone(row_order1), ['After Tone During CNO Organized By Tree Of Before CNO Tree Level ' num2str(tree_level)]);


figure;
imagesc([meanMat_beforeCNO_beforeTone(row_order1, :) meanMat_beforeCNO_afterTone(row_order1, :);...
    meanMat_CNO_beforeTone(row_order1, :) meanMat_CNO_afterTone(row_order1, :);...
    meanMat_afterCNO_beforeTone(row_order1, :) meanMat_afterCNO_afterTone(row_order1, :)])


[X1, ~, NeuronsLabels1] = loadNeuronsData(datapth, {'8_4_14_1-25_control'}, nt);
[meanMat1_beforeTone, allMat1_beforeTone] = getCentroidsByTree(trial_tree{tree_level}, X1(:,1:toneIndic,:), NeuronsLabels, NeuronsLabels1);
[meanMat1_afterTone, allMat1_afterTone] = getCentroidsByTree(trial_tree{tree_level}, X1(:,toneIndic+1:end,:), NeuronsLabels, NeuronsLabels1);
figure;
imagesc([meanMat_beforeCNO_beforeTone(row_order1, :) meanMat_beforeCNO_afterTone(row_order1, :);...
    meanMat1_beforeTone(row_order1, :) meanMat1_afterTone(row_order1, :)]);

% folders = unique(row_tree{4}.clustering);  
% for ci = 1:length(folders)
%     inds2folder = find(row_tree{3}.clustering == folders(ci));
%     R = ceil(sqrt(length(inds2folder)));
%     figure;
%     for r = 1:length(inds2folder)
%        subplot(R, R, r);
%        imagesc(permute(data(inds2folder(r), :, :), [3 2 1]));
%        title(NeuronsLabels{inds2folder(r)});
%     end
% end
    
    
    % %% Order by tree
% 
% [~, row_order] = sort(row_tree{2}.clustering);
% [~, col_order] = sort(col_tree{2}.clustering);
% orderedData = data(row_order, :);
% orderedData = orderedData(:, col_order);
% 
% % prepare trees for recursion
% for treeLevel = 1:length(row_tree)
%     row_orderedtree{treeLevel} = row_tree{treeLevel};
%     row_orderedtree{treeLevel}.clustering = row_tree{treeLevel}.clustering( row_order);
% end
% for treeLevel = 1:length(col_tree)
%     col_orderedtree{treeLevel} = col_tree{treeLevel};
%     col_orderedtree{treeLevel}.clustering = col_tree{treeLevel}.clustering( col_order);
% end
% 
% figure;
% subplot(2,2,1);
% imagesc(data);title('Data');
% subplot(2,2,2);
% imagesc(orderedData);title('Ordered Data');
% subplot(2,2,3);
% plotTreeWithColors(row_orderedtree, 1:size(data,1));
% title('Row Tree');
% 
% subplot(2,2,4);
% plotTreeWithColors(col_orderedtree, 1:size(data,2))
% title('Col Tree');
% 
% 
% ind2data = 1;
% minErr = Inf;
% tiling.isbusy = zeros(size(orderedData, 1), size(orderedData, 2), 1);
% tiling.isLeader = zeros(size(orderedData, 1), size(orderedData, 2), 1);
% solutionTiling = [];
% figure;
% clc;
% l = 1;
% vol_v = {[ 3*114  2*114  114 32 16 12 8]};
% for vol_i = 1:length(vol_v)
%     [minCurrErr, currSolutionTiling] = loopTiling2D(orderedData(:,:,1), row_orderedtree, col_orderedtree, vol_v{vol_i});
% 
% %     [minCurrErr, tilingCurrRes, currSolutionTiling] = recursiveTiling2D(orderedData(:,:,1), row_orderedtree, col_orderedtree, vol_v(vol_i), ind2data, tiling, solutionTiling, Inf);
%     if minCurrErr < inf
%         volumeRes(l) = vol_v(vol_i);
%         minErr(l) = minCurrErr;
%         solutionTilingRes(l) = currSolutionTiling;
%         l = l + 1;
%     end
% end
% 
% 
% 
% 
